name: Coverage Check

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
      statuses: write
      checks: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests with coverage
      run: npm run coverage:agent:summary
      id: coverage
      
    - name: Parse coverage results
      id: parse
      run: |
        # Parse the coverage output
        COVERAGE_OUTPUT=$(npm run coverage:agent:summary 2>/dev/null | tail -5)
        
        # Extract values
        STATUS=$(echo "$COVERAGE_OUTPUT" | grep "COVERAGE_STATUS=" | cut -d'=' -f2)
        LINES=$(echo "$COVERAGE_OUTPUT" | grep "LINES_COVERAGE=" | cut -d'=' -f2)
        CRITICAL=$(echo "$COVERAGE_OUTPUT" | grep "CRITICAL_FILES=" | cut -d'=' -f2)
        HIGH=$(echo "$COVERAGE_OUTPUT" | grep "HIGH_PRIORITY_FILES=" | cut -d'=' -f2)
        ACTION=$(echo "$COVERAGE_OUTPUT" | grep "NEXT_ACTION=" | cut -d'=' -f2)
        
        # Set outputs
        echo "status=$STATUS" >> $GITHUB_OUTPUT
        echo "lines=$LINES" >> $GITHUB_OUTPUT
        echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
        echo "high=$HIGH" >> $GITHUB_OUTPUT
        echo "action=$ACTION" >> $GITHUB_OUTPUT
        
        # Determine overall state
        if [ "$STATUS" = "COMPLIANT" ]; then
          echo "state=success" >> $GITHUB_OUTPUT
          echo "description=✅ Coverage: ${LINES}% (ADR-0005 compliant)" >> $GITHUB_OUTPUT
        elif [ "$CRITICAL" -gt "0" ]; then
          echo "state=failure" >> $GITHUB_OUTPUT
          echo "description=🔴 Coverage: ${LINES}% (${CRITICAL} critical files)" >> $GITHUB_OUTPUT
        else
          echo "state=pending" >> $GITHUB_OUTPUT
          echo "description=🟡 Coverage: ${LINES}% (needs improvement)" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Coverage Status Check
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const state = '${{ steps.parse.outputs.state }}';
          const description = '${{ steps.parse.outputs.description }}';
          const lines = '${{ steps.parse.outputs.lines }}';
          const critical = '${{ steps.parse.outputs.critical }}';
          const high = '${{ steps.parse.outputs.high }}';
          const action = '${{ steps.parse.outputs.action }}';
          
          // Create status check
          await github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.payload.pull_request.head.sha,
            state: state,
            description: description,
            context: 'coverage/adr-0005'
          });
          
          // Create detailed check run
          await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'Coverage Analysis',
            head_sha: context.payload.pull_request.head.sha,
            status: 'completed',
            conclusion: state === 'success' ? 'success' : state === 'failure' ? 'failure' : 'neutral',
            output: {
              title: `Coverage: ${lines}%`,
              summary: `**ADR-0005 Status:** ${state === 'success' ? '✅ COMPLIANT' : '⚠️ NEEDS IMPROVEMENT'}\n\n**Quick Stats:**\n- Lines: ${lines}%\n- Critical files: ${critical}\n- High priority files: ${high}\n\n**Next Action:** ${action}`,
              text: `## Coverage Summary\n\n- **Overall:** ${lines}% line coverage\n- **Status:** ${state === 'success' ? 'ADR-0005 Compliant' : 'Below 95% target'}\n- **Critical Issues:** ${critical} file(s)\n- **High Priority:** ${high} file(s)\n\n## Next Steps\n${action}\n\n## Commands\n\`\`\`bash\nnpm run coverage:html    # Detailed coverage report\nnpm run coverage:auto    # Auto-generate test stubs\nnpm run coverage:agent   # Agent-friendly analysis\n\`\`\``
            }
          });

    - name: Update PR with Coverage Badge
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const lines = '${{ steps.parse.outputs.lines }}';
          const critical = '${{ steps.parse.outputs.critical }}';
          const high = '${{ steps.parse.outputs.high }}';
          const action = '${{ steps.parse.outputs.action }}';
          
          // Get changed files in PR
          const { data: prFiles } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
          });
          
          // Filter for JavaScript files
          const changedJSFiles = prFiles
            .filter(file => file.filename.startsWith('js/') && file.filename.endsWith('.js'))
            .map(file => file.filename);
          
          if (changedJSFiles.length === 0) {
            console.log('No JavaScript files changed');
            return;
          }
          
          // Simple coverage badge
          const badge = lines >= 95 ? '🟢' : lines >= 80 ? '🟡' : '🔴';
          const status = lines >= 95 ? 'COMPLIANT' : 'NEEDS WORK';
          
          const commentBody = `## ${badge} Coverage: ${lines}% | Status: ${status}
          
**Changed Files:** ${changedJSFiles.map(f => `\`${f}\``).join(', ')}
**Critical Files:** ${critical} | **High Priority:** ${high}
**Next Action:** ${action}

<details>
<summary>🤖 Agent Commands</summary>

\`\`\`bash
npm run coverage:html     # Detailed analysis
npm run coverage:auto     # Auto-generate tests
npm run coverage:agent    # Machine-readable data
\`\`\`
</details>

---
*Auto-generated coverage report for agents*`;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: commentBody
          });

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: coverage/
        retention-days: 7