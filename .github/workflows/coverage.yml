name: Coverage

on:
  pull_request:
    branches: [ main, master ]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  coverage:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Fetch base branch
        run: |
          git fetch origin ${{ github.base_ref }}
          git checkout -b base-branch origin/${{ github.base_ref }}
          git checkout ${{ github.head_ref }}
          
      - uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: 'npm'
          
      - run: npm ci
      - run: npm run coverage
        env:
          NODE_ENV: test
      
      - name: Coverage report and comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            // Get changed JS files
            let changedFiles = [];
            try {
              const output = execSync('git diff --name-only base-branch...HEAD', { encoding: 'utf8' });
              changedFiles = output.split('\n')
                .filter(file => file.trim())
                .filter(file => file.match(/^js\/.*\.js$/));
              console.log('Changed JS files:', changedFiles);
            } catch (e) {
              console.log('Error getting changed files:', e.message);
            }
            
            if (changedFiles.length === 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '## 📊 Coverage Report\n\nNo JavaScript files were changed in this PR.'
              });
              return;
            }
            
            // Read coverage data
            let coverage = {};
            try {
              coverage = JSON.parse(fs.readFileSync('coverage/coverage-final.json', 'utf8'));
            } catch (e) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '## 📊 Coverage Report\n\n❌ Unable to read coverage data.'
              });
              return;
            }
            
            // Generate report for changed files
            let report = '## 📊 Coverage Report\n\n';
            report += '| File | Lines Covered | Percentage |\n';
            report += '|------|---------------|------------|\n';
            
            for (const file of changedFiles) {
              const fullPath = require('path').resolve(file);
              const fileCoverage = coverage[fullPath];
              
              if (!fileCoverage) {
                report += `| \`${file}\` | No coverage data | ❓ |\n`;
                continue;
              }
              
              // Calculate line coverage
              const statements = fileCoverage.s || {};
              const covered = Object.values(statements).filter(count => count > 0).length;
              const total = Object.keys(statements).length;
              const percentage = total > 0 ? Math.round((covered / total) * 100) : 0;
              
              const emoji = percentage >= 80 ? '✅' : percentage >= 60 ? '⚠️' : '❌';
              report += `| \`${file}\` | ${covered}/${total} | ${emoji} ${percentage}% |\n`;
            }
            
            report += '\n**Coverage target: 80%**\n';
            report += '*Coverage check warns but does not block PRs*';
            
            // Find and update/create comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('📊 Coverage Report') || comment.body.includes('📊 Test Coverage Report')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: report
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: report
              });
            }