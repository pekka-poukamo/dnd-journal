name: Coverage

on:
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read
  pull-requests: write

jobs:
  coverage:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
    - run: npm ci
    - run: npm run coverage
    
    - name: Get changed files
      id: changed-files
      run: |
        echo "files<<EOF" >> $GITHUB_OUTPUT
        git diff --name-only ${{ github.base_ref }}..HEAD | grep 'js/.*\.js$' || true
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Comment PR
      if: steps.changed-files.outputs.files != ''
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read coverage data
          let coverage = {};
          try {
            coverage = JSON.parse(fs.readFileSync('coverage/coverage-final.json', 'utf8'));
          } catch (e) {
            console.log('No coverage data found');
            return;
          }
          
          // Get changed files
          const changedFiles = `${{ steps.changed-files.outputs.files }}`.split('\n').filter(f => f.trim());
          
          if (changedFiles.length === 0) return;
          
          // Generate report for changed files only
          let report = '## 📊 Coverage Report\n\n';
          report += '| File | Lines Covered | Percentage |\n';
          report += '|------|---------------|------------|\n';
          
          for (const file of changedFiles) {
            const fullPath = require('path').resolve(file);
            const fileCoverage = coverage[fullPath];
            
            if (!fileCoverage) {
              report += `| \`${file}\` | No coverage data | ❓ |\n`;
              continue;
            }
            
            // Calculate line coverage
            const statements = fileCoverage.s || {};
            const covered = Object.values(statements).filter(count => count > 0).length;
            const total = Object.keys(statements).length;
            const percentage = total > 0 ? Math.round((covered / total) * 100) : 0;
            
            const emoji = percentage >= 80 ? '✅' : percentage >= 60 ? '⚠️' : '❌';
            report += `| \`${file}\` | ${covered}/${total} | ${emoji} ${percentage}% |\n`;
          }
          
          report += '\n**Coverage target: 80%**\n';
          report += '*Coverage check warns but does not block PRs*';
          
          // Find and update/create comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('📊 Coverage Report')
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: report
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: report
            });
          }