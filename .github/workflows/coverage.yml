name: Coverage Report

on:
  pull_request:
    branches: [ main, master ]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  coverage:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for coverage comparison
        
    - name: Checkout base branch
      run: git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
      
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run coverage on current branch
      run: npm run coverage
      continue-on-error: true
      
    - name: Save current coverage
      run: |
        mkdir -p coverage-reports
        cp coverage/coverage-final.json coverage-reports/current.json || echo "{}" > coverage-reports/current.json
        cp coverage/coverage-summary.json coverage-reports/current-summary.json || echo "{}" > coverage-reports/current-summary.json
        
    - name: Checkout base branch for baseline coverage
      run: |
        git checkout ${{ github.base_ref }}
        npm ci
        
    - name: Run coverage on base branch
      run: npm run coverage
      continue-on-error: true
      
    - name: Save base coverage
      run: |
        cp coverage/coverage-final.json coverage-reports/base.json || echo "{}" > coverage-reports/base.json
        cp coverage/coverage-summary.json coverage-reports/base-summary.json || echo "{}" > coverage-reports/base-summary.json
        
    - name: Checkout back to PR branch
      run: git checkout ${{ github.head_ref }}
      
    - name: Get changed files
      id: changed-files
      run: |
        echo "files<<EOF" >> $GITHUB_OUTPUT
        git diff --name-only ${{ github.base_ref }}..HEAD | grep -E '\.(js|mjs|cjs)$' | grep -v test | head -20 || true
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Generate coverage report
      id: coverage-report
      run: |
        node << 'EOF' > coverage-comment.md
        const fs = require('fs');
        const path = require('path');

        // Read coverage data
        let currentCoverage, baseCoverage, currentSummary, baseSummary;
        
        try {
          currentCoverage = JSON.parse(fs.readFileSync('coverage-reports/current.json', 'utf8'));
          currentSummary = JSON.parse(fs.readFileSync('coverage-reports/current-summary.json', 'utf8'));
        } catch (e) {
          currentCoverage = {};
          currentSummary = {};
        }
        
        try {
          baseCoverage = JSON.parse(fs.readFileSync('coverage-reports/base.json', 'utf8'));
          baseSummary = JSON.parse(fs.readFileSync('coverage-reports/base-summary.json', 'utf8'));
        } catch (e) {
          baseCoverage = {};
          baseSummary = {};
        }

        // Get changed files
        const changedFiles = process.env.CHANGED_FILES ? process.env.CHANGED_FILES.split('\n').filter(f => f.trim()) : [];
        
        // Helper function to get coverage percentage
        function getCoveragePercentage(coverage, type) {
          if (!coverage || !coverage[type]) return 0;
          const { covered = 0, total = 0 } = coverage[type];
          return total > 0 ? Math.round((covered / total) * 100) : 0;
        }
        
        // Helper function to format percentage with change indicator
        function formatPercentageChange(current, base, type = 'lines') {
          const currentPct = getCoveragePercentage(current, type);
          const basePct = getCoveragePercentage(base, type);
          const diff = currentPct - basePct;
          
          let indicator = '';
          if (diff > 0) indicator = ` (+${diff}%)`;
          else if (diff < 0) indicator = ` (${diff}%)`;
          
          let emoji = '';
          if (currentPct >= 90) emoji = 'ðŸŸ¢';
          else if (currentPct >= 80) emoji = 'ðŸŸ¡';
          else if (currentPct >= 70) emoji = 'ðŸŸ ';
          else emoji = 'ðŸ”´';
          
          return `${emoji} ${currentPct}%${indicator}`;
        }

        // Generate report
        let report = '## ðŸ“Š Coverage Report\n\n';
        
        // Overall coverage summary
        const totalCurrent = currentSummary.total || {};
        const totalBase = baseSummary.total || {};
        
        report += '### Overall Coverage\n\n';
        report += '| Type | Coverage | Change |\n';
        report += '|------|----------|--------|\n';
        report += `| Lines | ${formatPercentageChange(totalCurrent, totalBase, 'lines')} | |\n`;
        report += `| Functions | ${formatPercentageChange(totalCurrent, totalBase, 'functions')} | |\n`;
        report += `| Branches | ${formatPercentageChange(totalCurrent, totalBase, 'branches')} | |\n`;
        report += `| Statements | ${formatPercentageChange(totalCurrent, totalBase, 'statements')} | |\n\n`;

        // Changed files coverage
        if (changedFiles.length > 0) {
          report += '### Coverage for Changed Files\n\n';
          report += '| File | Lines | Functions | Branches | Statements |\n';
          report += '|------|-------|-----------|----------|-----------|\n';
          
          for (const file of changedFiles) {
            const fullPath = path.resolve(file);
            const currentFile = currentCoverage[fullPath] || {};
            const baseFile = baseCoverage[fullPath] || {};
            
            report += `| \`${file}\` | ${formatPercentageChange(currentFile, baseFile, 'lines')} | `;
            report += `${formatPercentageChange(currentFile, baseFile, 'functions')} | `;
            report += `${formatPercentageChange(currentFile, baseFile, 'branches')} | `;
            report += `${formatPercentageChange(currentFile, baseFile, 'statements')} |\n`;
          }
          report += '\n';
        } else {
          report += '### Changed Files\n\nNo JavaScript files were changed in this PR.\n\n';
        }

        // Coverage thresholds info
        report += '### Coverage Thresholds\n\n';
        report += 'This project maintains the following minimum coverage thresholds:\n';
        report += '- Lines: 80%\n';
        report += '- Functions: 80%\n';
        report += '- Branches: 80%\n';
        report += '- Statements: 80%\n\n';

        // Footer
        report += '---\n';
        report += '*Coverage report generated by [c8](https://github.com/bcoe/c8)*';

        console.log(report);
        EOF
      env:
        CHANGED_FILES: ${{ steps.changed-files.outputs.files }}

    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read the generated comment
          let comment;
          try {
            comment = fs.readFileSync('coverage-comment.md', 'utf8');
          } catch (e) {
            comment = '## ðŸ“Š Coverage Report\n\nUnable to generate coverage report.';
          }
          
          // Find existing coverage comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('ðŸ“Š Coverage Report')
          );
          
          if (existingComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage/
          coverage-reports/
        retention-days: 30